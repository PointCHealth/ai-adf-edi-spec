// <auto-generated />
using System;
using EDI.EventStore.Migrations.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EDI.EventStore.Migrations.Migrations
{
    [DbContext(typeof(EventStoreDbContext))]
    [Migration("20251006053003_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("EventSequence", "dbo");

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.DomainEvent", b =>
                {
                    b.Property<long>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventID"));

                    b.Property<string>("AggregateID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CausationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorrelationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventMetadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EventSequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXT VALUE FOR dbo.EventSequence");

                    b.Property<DateTime>("EventTimestamp")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EventVersion")
                        .HasColumnType("int");

                    b.Property<bool>("IsReversal")
                        .HasColumnType("bit");

                    b.Property<long?>("ReversedByEventID")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionBatchID")
                        .HasColumnType("bigint");

                    b.Property<long?>("TransactionHeaderID")
                        .HasColumnType("bigint");

                    b.HasKey("EventID");

                    b.HasIndex("CorrelationID");

                    b.HasIndex("EventGUID")
                        .IsUnique();

                    b.HasIndex("EventSequence")
                        .IsUnique();

                    b.HasIndex("ReversedByEventID");

                    b.HasIndex("TransactionHeaderID");

                    b.HasIndex("EventTimestamp", "EventSequence");

                    b.HasIndex("EventType", "EventTimestamp");

                    b.HasIndex("TransactionBatchID", "EventSequence");

                    b.HasIndex("AggregateType", "AggregateID", "EventSequence");

                    b.ToTable("DomainEvent", "dbo");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.Enrollment", b =>
                {
                    b.Property<long>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EnrollmentID"));

                    b.Property<string>("BenefitStatusCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<string>("GroupNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LastEventSequence")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastEventTimestamp")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("MaintenanceReasonCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("MaintenanceTypeCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<long>("MemberID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("PlanIdentifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("date");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("EffectiveDate", "TerminationDate");

                    b.HasIndex("MemberID", "IsActive");

                    b.ToTable("Enrollment", "dbo");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.EventSnapshot", b =>
                {
                    b.Property<long>("SnapshotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SnapshotID"));

                    b.Property<string>("AggregateID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AggregateType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("EventSequence")
                        .HasColumnType("bigint");

                    b.Property<string>("SnapshotData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SnapshotTimestamp")
                        .HasColumnType("datetime2(3)");

                    b.Property<int>("SnapshotVersion")
                        .HasColumnType("int");

                    b.HasKey("SnapshotID");

                    b.HasIndex("EventSequence");

                    b.HasIndex("AggregateType", "AggregateID", "SnapshotVersion")
                        .IsUnique();

                    b.ToTable("EventSnapshot", "dbo");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.Member", b =>
                {
                    b.Property<long>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MemberID"));

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmploymentStatusCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .HasColumnType("char(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("LastEventSequence")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastEventTimestamp")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MemberSuffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RelationshipCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("SSN")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("State")
                        .HasColumnType("char(2)");

                    b.Property<string>("SubscriberID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MemberID");

                    b.HasIndex("SubscriberID")
                        .IsUnique();

                    b.HasIndex("LastName", "FirstName", "DateOfBirth");

                    b.ToTable("Member", "dbo");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.TransactionBatch", b =>
                {
                    b.Property<long>("TransactionBatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionBatchID"));

                    b.Property<Guid>("BatchGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlobFullUri")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventCount")
                        .HasColumnType("int");

                    b.Property<string>("FileHash")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FileReceivedDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<long?>("FirstEventSequence")
                        .HasColumnType("bigint");

                    b.Property<string>("FunctionalGroupControlNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("InterchangeControlNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long?>("LastEventSequence")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("PartnerCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("ProcessingCompletedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime?>("ProcessingStartedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("ProcessingStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("TransactionBatchID");

                    b.HasIndex("BatchGUID")
                        .IsUnique();

                    b.HasIndex("FileHash")
                        .IsUnique()
                        .HasFilter("[FileHash] IS NOT NULL");

                    b.HasIndex("InterchangeControlNumber", "FunctionalGroupControlNumber");

                    b.HasIndex("ProcessingStatus", "FileReceivedDate");

                    b.HasIndex("PartnerCode", "TransactionType", "FileReceivedDate");

                    b.ToTable("TransactionBatch", "dbo", t =>
                        {
                            t.HasCheckConstraint("CHK_TransactionBatch_Direction", "[Direction] IN ('INBOUND', 'OUTBOUND')");

                            t.HasCheckConstraint("CHK_TransactionBatch_Status", "[ProcessingStatus] IN ('RECEIVED', 'PROCESSING', 'COMPLETED', 'FAILED', 'REVERSED')");
                        });
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.TransactionHeader", b =>
                {
                    b.Property<long>("TransactionHeaderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionHeaderID"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<long?>("FirstEventSequence")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastEventSequence")
                        .HasColumnType("bigint");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("ProcessingStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PurposeCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ReferenceIdentification")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SegmentCount")
                        .HasColumnType("int");

                    b.Property<long>("TransactionBatchID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<Guid>("TransactionGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionSetControlNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("TransactionHeaderID");

                    b.HasIndex("TransactionBatchID");

                    b.HasIndex("TransactionGUID")
                        .IsUnique();

                    b.HasIndex("TransactionSetControlNumber");

                    b.ToTable("TransactionHeader", "dbo");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.DomainEvent", b =>
                {
                    b.HasOne("EDI.EventStore.Migrations.Entities.DomainEvent", "ReversedBy")
                        .WithMany("ReversalEvents")
                        .HasForeignKey("ReversedByEventID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EDI.EventStore.Migrations.Entities.TransactionBatch", "TransactionBatch")
                        .WithMany("DomainEvents")
                        .HasForeignKey("TransactionBatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EDI.EventStore.Migrations.Entities.TransactionHeader", "TransactionHeader")
                        .WithMany("DomainEvents")
                        .HasForeignKey("TransactionHeaderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ReversedBy");

                    b.Navigation("TransactionBatch");

                    b.Navigation("TransactionHeader");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.Enrollment", b =>
                {
                    b.HasOne("EDI.EventStore.Migrations.Entities.Member", "Member")
                        .WithMany("Enrollments")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.TransactionHeader", b =>
                {
                    b.HasOne("EDI.EventStore.Migrations.Entities.TransactionBatch", "TransactionBatch")
                        .WithMany("TransactionHeaders")
                        .HasForeignKey("TransactionBatchID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TransactionBatch");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.DomainEvent", b =>
                {
                    b.Navigation("ReversalEvents");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.Member", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.TransactionBatch", b =>
                {
                    b.Navigation("DomainEvents");

                    b.Navigation("TransactionHeaders");
                });

            modelBuilder.Entity("EDI.EventStore.Migrations.Entities.TransactionHeader", b =>
                {
                    b.Navigation("DomainEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
